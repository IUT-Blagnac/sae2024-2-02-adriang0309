import unittest

from itertools import groupby, batched
# ATTENTION : Nécessite Python >= 3.12 pour itertools.batched


def n_chars(c: str, n: int) -> str:
    """
    Encodage RLE pour un caractère et un nombre. Gère les cas à 9 ou plus.

    >>> n_chars('z', 5)
    '5z'
    >>> n_chars('W', 11)
    '9W2W'
    """
    res = []
    while n > 9:
        res.append(f'9{c}')
        n -= 9
    res.append(f'{n}{c}')
    return ''.join(res)


def rle(s: str) -> str:
    """
    Compression RLE.

    >>> rle('abbccc')
    '1a2b3c'
    """
    return ''.join(n_chars(char, len(list(items)))
                   for char, items in groupby(s))  # groupe par lettres identiques


def unrle(s: str) -> str:
    """
    Décompression RLE.

    >>> unrle('1a2b3c')
    'abbccc'
    """
    return ''.join(char * int(n)
                   for n, char in batched(s, 2))  # groupe par 2

class TestRLE(unittest.TestCase):

    def test_RLE(self):
        self.assertEqual(rle(""), "")
        self.assertEqual(rle("abc"), "1a1b1c")
        self.assertEqual(rle("abbccc"), "1a2b3c")
        self.assertEqual(rle("aaabaa"), "3a1b2a")
        self.assertEqual(rle("aAa"), "1a1A1a")
        self.assertEqual(rle("WWWWWWWWWWWWW"), "9W4W")

    
    def test_RLE_rec(self):
        self.assertEqual(RLE_recursif("", 1), "")
        self.assertEqual(RLE_recursif("", 3), "")
        self.assertEqual(RLE_recursif("abc", 1), "1a1b1c")
        self.assertEqual(RLE_recursif("abbccc", 1), "1a2b3c")
        self.assertEqual(RLE_recursif("aaabaa", 1), "3a1b2a")
        self.assertEqual(RLE_recursif("aAa", 1), "1a1A1a")
        self.assertEqual(RLE_recursif("abc", 2), "111a111b111c")
        self.assertEqual(RLE_recursif("abc", 3), "311a311b311c")
        
        saeItel1113122113121113222123211211131211121311121321123113213221121113122123211211131221121311121312211213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121113222112131112131221121321131211132221121321132132211331121321232221123113112221131112311322311211131122211213211331121321122112133221121113122113121113222123112221221321132132211231131122211331121321232221121113122113121113222123113221231231121113213221231221132221222112112322211g1113122113121113222123211211131211121311121321123113213221121113122123211211131221121311121312211213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121113222112131112131221121321131211132221121321132132211331121321232221123113112221131112311322311211131122211213211331121321122112133221121113122113121113222123112221221321132132211231131122211331121321232221121113122113121113222123113221231231121113213221231221132221222112112322211o")

        self.assertEqual(RLE_recursif("SAE Algo", 20), saeIte20)

    def test_unRLE(self):
        self.assertEqual(unrle(""), "")
        self.assertEqual(unrle("1a1b1c"), "abc")
        self.assertEqual(unrle("1a2b3c"), "abbccc")
        self.assertEqual(unrle("3a1b2a"), "aaabaa")
        self.assertEqual(unrle("1a1A1a"), "aAa")
        self.assertEqual(unrle("9W4W"), "WWWWWWWWWWWWW")

    def test_unRLE_rec(self):
        self.assertEqual(unRLE_recursif("", 1), "")
        #self.assertEqual(unRLE_recursif("", 3), "")
        self.assertEqual(unRLE_recursif("1a1b1c", 1), "abc")
        self.assertEqual(unRLE_recursif("1a2b3c", 1), "abbccc")
        self.assertEqual(unRLE_recursif("3a1b2a", 1), "aaabaa")
        self.assertEqual(unRLE_recursif("1a1A1a", 1), "aAa")
        self.assertEqual(unRLE_recursif("111a111b111c", 2), "abc")
        self.assertEqual(unRLE_recursif("311a311b311c", 3), "abc")

if __name__ == '__main__':
    unittest.main()

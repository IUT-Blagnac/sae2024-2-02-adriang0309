package iut.sae.algo;

import org.junit.Test;

import junit.framework.TestCase;

public class efficaciteTest extends TestCase{

    /*
   * RLE("")=""
   * RLE("abc")="1a1b1c"
   * RLE("abbccc")="1a2b3c"
   * RLE("aaabaa")="3a1b2a"
   * RLE("aAa")="1a1A1a"
   */

   @Test
   public void testRLE(){
      assertEquals("", efficacite.RLE("") );
      
      assertEquals("1a1b1c", efficacite.RLE("abc"));
      assertEquals("1a2b3c", efficacite.RLE("abbccc"));
      assertEquals("3a1b2a", efficacite.RLE("aaabaa"));
      assertEquals("1a1A1a", efficacite.RLE("aAa"));
      assertEquals("9W4W", efficacite.RLE("WWWWWWWWWWWWW"));
      

   }

   public static void main(String[] args) {
      System.err.println(efficacite.RLE("abc", 2));
   }

   /*
   * RLE(str, 1)=RLE(str)
   * RLE(str, 3)=RLE(RLE(RLE(str)))
   */
   @Test
   public void testRLERecursif(){
      try{
         assertEquals("", efficacite.RLE("", 1));
         assertEquals("", efficacite.RLE("", 3));
         
         assertEquals("1a1b1c", efficacite.RLE("abc", 1));
         assertEquals("1a2b3c", efficacite.RLE("abbccc", 1));
         assertEquals("3a1b2a", efficacite.RLE("aaabaa", 1));
         assertEquals("1a1A1a", efficacite.RLE("aAa", 1));

         assertEquals("111a111b111c", (efficacite.RLE("abc", 2)));
         assertEquals("311a311b311c", (efficacite.RLE("abc", 3)));

         String saeItel1113122113121113222123211211131211121311121321123113213221121113122123211211131221121311121312211213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121113222112131112131221121321131211132221121321132132211331121321232221123113112221131112311322311211131122211213211331121321122112133221121113122113121113222123112221221321132132211231131122211331121321232221121113122113121113222123113221231231121113213221231221132221222112112322211g1113122113121113222123211211131211121311121321123113213221121113122123211211131221121311121312211213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121113222112131112131221121321131211132221121321132132211331121321232221123113112221131112311322311211131122211213211331121321122112133221121113122113121113222123112221221321132132211231131122211331121321232221121113122113121113222123113221231231121113213221231221132221222112112322211o";
         assertEquals(saeIte20, efficacite.RLE("SAE Algo", 20));
      }
      catch(Exception e){
         fail("Exception inatendue");
      }
   }

   /*
  * unRLE(RLE(str))=str
  *
  * unRLE("")=""
  * unRLE("1a1b1c")="abc"
  * unRLE("1a2b3c")="abbccc"
  * unRLE("3a1b2a")="aaabaa"
  * unRLE("1a1A1a")="aAa"
  */


   @Test
   public void testUnRLE(){
      try{
         assertEquals("", efficacite.unRLE(""));
         assertEquals("abc", efficacite.unRLE("1a1b1c"));
         assertEquals("abbccc", efficacite.unRLE("1a2b3c"));
         assertEquals("aaabaa", efficacite.unRLE("3a1b2a"));
         assertEquals("aAa", efficacite.unRLE("1a1A1a"));
         assertEquals("WWWWWWWWWWWWW", efficacite.unRLE("9W4W"));
      }
      catch(Exception e){
         fail("Exception inatendue");
      }
   }

   
   @Test
   public void testUnRLERecursif(){
      try{
         assertEquals("", efficacite.unRLE("", 1));
         assertEquals("", efficacite.unRLE("", 3));
         
         assertEquals("abc", efficacite.unRLE("1a1b1c", 1));
         assertEquals("abbccc", efficacite.unRLE("1a2b3c", 1));
         assertEquals("aaabaa", efficacite.unRLE("3a1b2a", 1));
         assertEquals("aAa", efficacite.unRLE("1a1A1a", 1));

         assertEquals("abc", (efficacite.unRLE("111a111b111c", 2)));
         assertEquals("abc", (efficacite.unRLE("311a311b311c", 3)));
      }
      catch(Exception e){
         fail("Exception inatendue");
      }
   }
    
}
